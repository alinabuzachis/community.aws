- block:
    # ============================================================
    - name: Set up AWS connection info
      set_fact:
        aws_connection_info: &aws_connection_info
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          security_token: "{{ security_token }}"
          region: "{{ aws_region }}"
      no_log: yes
    
    - name: Get info of all existing clusters
      rds_cluster_info:
        <<: *aws_connection_info
      register: result_cluster_info
    
    - assert:
        that:
            - result_cluster_info is successful

    - name: Create minimal aurora cluster in default VPC and default subnet group (CHECK MODE)
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result
      check_mode: true

    - assert:
        that:
          - result.changed

    - name: Create minimal aurora cluster in default VPC and default subnet group
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed
          - result.status == 'available'
          - result.port == 3306
    
    - name: Get info of the existing cluster
      rds_cluster_info:
        cluster_id: "cluster-{{ resource_prefix }}"
        <<: *aws_connection_info
      register: result_cluster_info
    
    - assert:
        that:
            - result_cluster_info is successful

    - name: Test idempotence - create minimal aurora cluster in default VPC and default subnet group (CHECK MODE)
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result
      check_mode: true

    - assert:
        that:
          - not result.changed

    - name: Test idempotence - create minimal aurora cluster in default VPC and default subnet group
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - not result.changed
      
    ###
    - name: Take a snapshot of the cluster
      rds_snapshot:
        db_instance_identifier: "cluster-{{ resource_prefix }}"
        db_snapshot_identifier: "cluster-{{ resource_prefix }}-snapshot"
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed

    - name: Restore cluster from source (snapshot)
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}-restored"
        snapshot_identifier: "cluster-{{ resource_prefix }}-snapshot"
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed
    
    - name: Rename the cluster (CHECK MODE)
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        cluster_id: "cluster-{{ resource_prefix }}"
        new_cluster_id: "cluster-{{ resource_prefix }}-renamed"
        apply_immediately: true
        <<: *aws_connection_info
      register: result
      check_mode: true

    - assert:
        that:
          - result.changed

    - name: Rename the cluster
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        cluster_id: "cluster-{{ resource_prefix }}"
        new_cluster_id: "cluster-{{ resource_prefix }}-renamed"
        apply_immediately: true
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed
          - 'result.db_cluster_identifier == "cluster-{{ resource_prefix }}-renamed"'
    
    - name: Delete the snapshot
      rds_cluster:
        snapshot_identifier: "cluster-{{ resource_prefix }}-snapshot"
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed
    
    - name: Delete aurora cluster without creating a final snapshot (CHECK MODE)
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}-renamed"
        skip_final_snapshot: True
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        state: absent
        <<: *aws_connection_info
      register: result
      check_mode: true

    - assert:
        that:
          - result.changed
    
    - name: Delete aurora cluster without creating a final snapshot
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}-renamed"
        skip_final_snapshot: True
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        state: absent
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed
    
    ###
    #########
    # create a bucket
    # export snapshot to bucket
    # restore from bucket
    #
    #- name: Crete an S3 bucket to host the snapshot
    #  s3_bucket:
    #    name: '{{ local_bucket_name }}'
    #    state: present
    #  register: output

    #- assert:
    #    that:
    #      - output is success
    #      - output is changed
    
    # - name: Exporting DB snapshot data to Amazon S3
    # - name: Create a new aurora cluster
    
    #########

    - name: Purge a tag from the cluster (CHECK MODE)
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result
      check_mode: true

    - assert:
        that:
          - result.changed

    - name: Purge a tag from the cluster
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed

    - name: Add a tag to the cluster (CHECK MODE)
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result
      check_mode: true

    - assert:
        that:
          - result.changed

    - name: Add a tag to the cluster
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "cluster-{{ resource_prefix }}"
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed


  
  # create cluster from source (snapshot, cluster, s3) - snapshot_identifier, source_db_cluster_identifier
  # promote a cluster
  # apply_immediately
  # enable_cloudwatch_logs_exports
  # copy_tags_to_snapshot
  # vpc_security_group_ids

  always:

    - name: tear down cluster if tests failed
      rds_cluster:
        engine: aurora
        username: "testrdsusername"
        password: "test-rds_password"
        cluster_id: "{{ item }}"
        skip_final_snapshot: True
        tags:
          Name: "cluster-{{ resource_prefix }}"
          Created_By: "Ansible_rds_cluster_integration_test"
        state: absent
        <<: *aws_connection_info
      loop:
        - "cluster-{{ resource_prefix }}"
        - "cluster-{{ resource_prefix }}-renamed"
        - "cluster-{{ resource_prefix }}-restored"
