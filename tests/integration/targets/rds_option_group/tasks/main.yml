---
- name: rds_option_group tests
  collections:
    - amazon.aws
  
  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'

  block:
  - name: create a VPC
    ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: present
        cidr_block: "10.122.122.128/26"
        tags:
            Name: "{{ resource_prefix }}-vpc"
            Description: "created by rds_instance integration tests"
    register: vpc_result

  - name: create subnets
    ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ item.zone }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
            Name: "{{ resource_prefix }}-subnet"
            Description: "created by rds_instance integration tests"
        state: present
    register: subnets_result
    loop:
        - {"cidr": "10.122.122.128/28", "zone": "{{ aws_region }}a"}
        - {"cidr": "10.122.122.144/28", "zone": "{{ aws_region }}b"}
        - {"cidr": "10.122.122.160/28", "zone": "{{ aws_region }}c"}

  - name: Create security groups
    ec2_group:
        name: "{{ item }}"
        description: "created by rds_instance integration tests"
        state: present
    register: sgs_result
    loop:
        - "{{ resource_prefix }}-sg-1"
        - "{{ resource_prefix }}-sg-2"
        - "{{ resource_prefix }}-sg-3"

  - debug: var=sgs_result

  - name: List all the option groups
    rds_option_group_info:
      region: "{{ aws_region }}"
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
    register: option_groups
  
  - debug: var=option_groups

  - name: Create an RDS Mysql option group
    rds_option_group:
        #profile: production
        region: "{{ aws_region }}"
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token | default(omit) }}'
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sgs_result.results.0.group_id }}"
          OptionSettings:
            - Name: MAX_SIMULTANEOUS_CONNECTIONS
              Value: '20'
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.25'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - new_rds_mysql_option_group.changed

  - name: Create an RDS Mysql option group (idempotency)
    rds_option_group:
        #profile: production
        region: "{{ aws_region }}"
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token | default(omit) }}'
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sgs_result.results.0.group_id }}"
          OptionSettings:
            - Name: MAX_SIMULTANEOUS_CONNECTIONS
              Value: '20'
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.25'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - not new_rds_mysql_option_group.changed

  - name: Create an RDS Mysql option group - apply different changes (expected changed=true)
    rds_option_group:
        #profile: production
        region: "{{ aws_region }}"
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token | default(omit) }}'
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sgs_result.results.0.group_id }}"
          OptionSettings:
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.5'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - new_rds_mysql_option_group.changed
  
  - name: Create an RDS Mysql option group - apply different changes (expected changed=true)
    rds_option_group:
        #profile: production
        region: "{{ aws_region }}"
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token | default(omit) }}'
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sgs_result.results.0.group_id }}"
            - "{{ sgs_result.results.1.group_id }}"
            - "{{ sgs_result.results.2.group_id }}"
          OptionSettings:
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.5'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - new_rds_mysql_option_group.changed
  
  - name: Get info about an option group
    rds_option_group_info:
      region: "{{ aws_region }}"
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      option_group_name: "{{ option_group_name }}"
    register: option_groups
  
  - debug: var=option_groups

  always:

  - name: Delete an RDS Mysql option group
    community.aws.rds_option_group:
        state: absent
        region: "{{ aws_region }}"
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token | default(omit) }}'
        option_group_name: "{{ option_group_name }}"
    register: deleted_rds_mysql_option_group
    ignore_errors: yes

  - name: Remove security groups
    ec2_group:
        name: "{{ item }}"
        description: "created by rds_instance integration tests"
        state: absent
    register: sgs_result
    loop:
        - "{{ resource_prefix }}-sg-1"
        - "{{ resource_prefix }}-sg-2"
        - "{{ resource_prefix }}-sg-3"
    ignore_errors: yes

  - name: remove subnets
    ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ item.zone }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
            Name: "{{ resource_prefix }}-subnet"
            Description: "created by rds_instance integration tests"
        state: absent
    register: subnets
    ignore_errors: yes
    retries: 30
    until: subnets is not failed
    delay: 10
    loop:
        - {"cidr": "10.122.122.128/28", "zone": "{{ aws_region }}a"}
        - {"cidr": "10.122.122.144/28", "zone": "{{ aws_region }}b"}
        - {"cidr": "10.122.122.160/28", "zone": "{{ aws_region }}c"}

  - name: create a VPC
    ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: absent
        cidr_block: "10.122.122.128/26"
        tags:
            Name: "{{ resource_prefix }}-vpc"
            Description: "created by rds_instance integration tests"
    register: vpc_result
    ignore_errors: yes
    retries: 30
    until: vpc_result is not failed
    delay: 10
