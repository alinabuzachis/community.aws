---
- name: rds_option_group tests
  collections:
    - amazon.aws
  
  module_defaults:
    group/aws: &creds
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
      

  block:
  - name: create a VPC
    ec2_vpc_net:
        name: "{{ vpc_name }}"
        state: present
        cidr_block: "{{ vpc_cidr }}"
    register: vpc_result
  
  - name: Assert success
    assert:
      that:
          - vpc_result is successful
          - '"vpc" in vpc_result'
          - '"cidr_block" in vpc_result.vpc'
          - vpc_result.vpc.cidr_block == vpc_cidr
          - '"id" in vpc_result.vpc'
          - vpc_result.vpc.id.startswith("vpc-")
          - '"state" in vpc_result.vpc'
          - vpc_result.vpc.state == 'available'
          - '"tags" in vpc_result.vpc'

  - name: "set fact: VPC ID"
    set_fact:
      vpc_id: "{{ vpc_result.vpc.id }}"

  - name: create subnet
    ec2_vpc_subnet:
        cidr: "{{ subnet_cidr}}"
        vpc_id: "{{ vpc_id }}"
        state: present
    register: subnet_result
  
  - name: Assert success
    assert:
      that:
        - subnet_result is successful
        - '"subnet" in subnet_result'
        - '"cidr_block" in subnet_result.subnet'
        - subnet_result.subnet.cidr_block == subnet_cidr
        - '"id" in subnet_result.subnet'
        - subnet_result.subnet.id.startswith("subnet-")
        - '"state" in subnet_result.subnet'
        - subnet_result.subnet.state == 'available'
        - '"tags" in subnet_result.subnet'
        - subnet_result.subnet.vpc_id == vpc_id

  - name: "set fact: VPC subnet ID"
    set_fact:
      subnet_id: "{{ subnet_result.subnet.id }}"


  - name: Create security groups
    ec2_group:
        name: "{{ item }}"
        description: "created by rds_instance integration tests"
        state: present
    register: sgs_result
    loop:
        - "{{ sg_1_name }}"
        - "{{ sg_2_name }}"
        - "{{ sg_3_name }}"

  - name: Assert success
    assert:
      that:
        - sgs_result is successful

  - name: "set fact: security groups ID"
    set_fact:
      sg_1: "{{ sgs_result.results.0.group_id }}"
      sg_2: "{{ sgs_result.results.1.group_id }}"
      sg_3: "{{ sgs_result.results.2.group_id }}"


  - name: List all the option groups
    rds_option_group_info:
      <<: *creds
    register: option_groups_result
  
  - name: Assert success
    assert:
      that:
          - option_groups_result is successful


  - name: Create an RDS Mysql option group
    rds_option_group:
        <<: *creds
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sg_1 }}"
          OptionSettings:
            - Name: MAX_SIMULTANEOUS_CONNECTIONS
              Value: '20'
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.25'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - new_rds_mysql_option_group.changed

  - name: Create an RDS Mysql option group (idempotency)
    rds_option_group:
        <<: *creds
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sg_1 }}"
          OptionSettings:
            - Name: MAX_SIMULTANEOUS_CONNECTIONS
              Value: '20'
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.25'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - not new_rds_mysql_option_group.changed

  - name: Create an RDS Mysql option group - apply different changes (expected changed=true)
    rds_option_group:
        <<: *creds
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sg_1 }}"
          OptionSettings:
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.5'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - new_rds_mysql_option_group.changed
  
  - name: Create an RDS Mysql option group - apply different changes (expected changed=true)
    rds_option_group:
        <<: *creds
        state: present
        option_group_name: "{{ option_group_name }}"
        engine_name: "{{ engine_name }}"
        major_engine_version: "{{ major_engine_version }}"
        option_group_description: "{{ option_group_description }}"
        apply_immediately: true
        options:
        - OptionName: MEMCACHED
          Port: 11211
          VpcSecurityGroupMemberships:
            - "{{ sg_1 }}"
            - "{{ sg_2 }}"
            - "{{ sg_3 }}"
          OptionSettings:
            - Name: CHUNK_SIZE_GROWTH_FACTOR
              Value: '1.5'
    register: new_rds_mysql_option_group

  - assert:
      that:
        - new_rds_mysql_option_group.changed
  
  - name: Get info about an option group
    rds_option_group_info:
      <<: *creds
      option_group_name: "{{ option_group_name }}"
    register: option_groups
  
  - name: Assert success
    assert:
      that:
          - option_groups_result is successful


  always:

  - name: Delete an RDS Mysql option group
    community.aws.rds_option_group:
        <<: *creds
        state: absent
        option_group_name: "{{ option_group_name }}"
    register: deleted_rds_mysql_option_group
    ignore_errors: yes

  - name: Remove security groups
    ec2_group:
        name: "{{ item }}"
        description: "created by rds_instance integration tests"
        state: absent
    register: sgs_result
    loop:
        - "{{ sg_1_name }}"
        - "{{ sg_2_name }}"
        - "{{ sg_3_name }}"
    ignore_errors: yes

  - name: remove subnet
    ec2_vpc_subnet:
        cidr: "{{ subnet_cidr }}"
        vpc_id: "{{ vpc_id }}"
        state: absent
    ignore_errors: yes

  - name: Delete VPC
    ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ vpc_cidr }}"
      state: absent
      purge_cidrs: yes
    ignore_errors: yes